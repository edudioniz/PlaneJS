/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"flight":4,"EOF":5,"PROGRAM":6,"ID":7,"LLAVE_OPEN":8,"blocks":9,"LLAVE_CLOSE":10,"staments":11,"rutas":12,"ruta":13,"ROUTE":14,"set_r":15,"END_SENTENCE":16,"SET":17,"expression_id":18,"stament":19,"POINT":20,"LINE":21,"ASSIGN":22,"expression":23,"expression_p":24,"expression_l":25,"+":26,"punto":27,"linea":28,"NUMBER":29,"COMMA":30,"PAR_OPEN":31,"PAR_CLOSE":32,"lineas":33,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"PROGRAM",7:"ID",8:"LLAVE_OPEN",10:"LLAVE_CLOSE",14:"ROUTE",16:"END_SENTENCE",17:"SET",20:"POINT",21:"LINE",22:"ASSIGN",26:"+",29:"NUMBER",30:"COMMA",31:"PAR_OPEN",32:"PAR_CLOSE"},
productions_: [0,[3,2],[4,5],[9,2],[13,7],[15,3],[12,0],[12,2],[11,0],[11,3],[19,2],[19,2],[19,3],[23,1],[23,1],[23,1],[18,1],[18,3],[24,1],[24,3],[25,1],[25,3],[27,3],[28,7],[28,5],[28,5],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    this.$ = $$[$0-1];
    return this.$;

break;
case 2:
    this.$ = {
    type: 'PROGRAM',
    id: $$[$0-3],
    block: $$[$0-1]
    };

break;
case 3:
    this.$ = {
    type: 'BLOCK',
    var: $$[$0-1],
    stament: $$[$0]
    };

break;
case 4:
    this.$ = {
    type: 'ROUTE',
    id: $$[$0-5],
    stament:$$[$0-3],
    set:$$[$0-2]
    };

break;
case 5:
    var retorno = [];
    for (var i=0;i<list_table.length; i++){
	retorno.push(line_table[list_table[i]].ini);
	retorno.push(line_table[list_table[i]].fin);
    }
    list_table = [];
    this.$ = {
    value: retorno
    };



break;
case 7:
    this.$ = [$$[$0-1]];
    if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);

break;
case 9:
    this.$ = [$$[$0-2]];
    if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);

break;
case 10:
    point_table[$$[$0]]={x:'null',y:'null'};
    this.$ = {
    type: 'POINT',
    id: $$[$0]
    };


break;
case 11:
    line_table[$$[$0]]={ini:'null',fin:'null'};
    this.$ = {
    type: 'LINE',
    id: $$[$0]
    };

break;
case 12:
    
    this.$ = {
    type: '=',
    right: $$[$0-2],
    left: $$[$0]
    };
    if ($$[$0].type == "POINT"){
 	point_table[$$[$0-2]].x = $$[$0].x;
 	point_table[$$[$0-2]].y = $$[$0].y;
    }else if($$[$0].type == "LINE"){
	line_table[$$[$0-2]].ini = {x: $$[$0].start.x, y: $$[$0].start.y};
	line_table[$$[$0-2]].fin = {x: $$[$0].end.x, y: $$[$0].end.y};
    }

break;
case 13:
    this.$ = $$[$0];

break;
case 14:
    this.$ = $$[$0];

break;
case 15:
    this.$ = $$[$0];
    

break;
case 16:
 
   this.$ = {
   id: $$[$0],
   inicio:{
	x:line_table[$$[$0]].ini.x,
	y:line_table[$$[$0]].ini.y
   },
   fin:{
	x:line_table[$$[$0]].fin.x,
	y:line_table[$$[$0]].fin.y
   }
   };
   list_table.push([$$[$0]]);


break;
case 17:
   this.$ = {
   type: '+',
   right: $$[$0-2],
   left: $$[$0]

   };

break;
case 19:
    this.$ = {
    type: '+',
    right: $$[$0-2],
    left: $$[$0]
    };

break;
case 21:
    this.$ = {
    type: '+',
    right: $$[$0-2],
    left: $$[$0]
    };

break;
case 22:
    
    this.$ = {
    type: 'POINT',
    x: $$[$0-2],
    y: $$[$0]
    };

break;
case 23:
    this.$ = {
    type: 'LINE',
    start: $$[$0-5],
    end: $$[$0-1]
    };

break;
case 24:
    this.$ = {
    type: 'LINE',
    start: $$[$0-3],
    //end: $$[$0]        //change ID for point.
    end: {
	type: 'POINT',
    	x: point_table[$$[$0]].x,
  	y: point_table[$$[$0]].y
    }
    };

break;
case 25:
    this.$ = {
    type: 'LINE',
    //start: $$[$0-4], CHANGE ID FOR POINT
    start: {
	type: 'POINT',
    	x: point_table[$$[$0-4]].x,
  	y: point_table[$$[$0-4]].y
    },
    end: $$[$0-1]
    };

break;
case 26:
    this.$ = [$$[$0-1]];
    if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);

break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:[1,5]},{1:[2,1]},{8:[1,6]},{7:[1,12],9:7,10:[2,8],11:8,14:[2,8],19:9,20:[1,10],21:[1,11]},{10:[1,13]},{10:[2,6],12:14,13:15,14:[1,16]},{16:[1,17]},{7:[1,18]},{7:[1,19]},{22:[1,20]},{5:[2,2]},{10:[2,3]},{10:[2,6],12:21,13:15,14:[1,16]},{7:[1,22]},{7:[1,12],10:[2,8],11:23,14:[2,8],17:[2,8],19:9,20:[1,10],21:[1,11]},{16:[2,10]},{16:[2,11]},{7:[1,28],18:25,23:24,24:26,25:27,27:29,28:30,29:[1,31],31:[1,32]},{10:[2,7]},{8:[1,33]},{10:[2,9],14:[2,9],17:[2,9]},{16:[2,12]},{16:[2,13],26:[1,34]},{16:[2,14],26:[1,35]},{16:[2,15],26:[1,36]},{16:[2,16],26:[2,16],30:[1,37]},{16:[2,18],26:[2,18]},{16:[2,20],26:[2,20]},{30:[1,38]},{27:39,29:[1,31]},{7:[1,12],11:40,17:[2,8],19:9,20:[1,10],21:[1,11]},{7:[1,42],18:41},{27:43,29:[1,31]},{7:[1,45],28:44,31:[1,32]},{31:[1,46]},{29:[1,47]},{32:[1,48]},{15:49,17:[1,50]},{16:[2,17],26:[2,17]},{16:[2,16],26:[2,16]},{16:[2,19],26:[2,19]},{16:[2,21],26:[2,21]},{30:[1,37]},{27:51,29:[1,31]},{16:[2,22],26:[2,22],32:[2,22]},{30:[1,52]},{10:[1,53]},{7:[1,42],18:54},{32:[1,55]},{7:[1,57],31:[1,56]},{16:[1,58]},{16:[1,59],26:[1,34]},{16:[2,25],26:[2,25]},{27:60,29:[1,31]},{16:[2,24],26:[2,24]},{10:[2,4],14:[2,4]},{10:[2,5]},{32:[1,61]},{16:[2,23],26:[2,23]}],
defaultActions: {4:[2,1],13:[2,2],14:[2,3],18:[2,10],19:[2,11],21:[2,7],24:[2,12],59:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var point_table = [];
var line_table = [];
var list_table = [];
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

    var reserved_words = {
		PROGRAM: 'program',
		LINE: 'line',
		POINT: 'point',
		SET: 'set' ,
		ROUTE: 'route'
    }

    function idORrw(x) {
        return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
    }

    
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar espacios */
break;
case 1:return 22
break;
case 2:return yy_.yytext
break;
case 3:return idORrw(yy_.yytext)
break;
case 4:return 29
break;
case 5:return 8
break;
case 6:return 10
break;
case 7:return 30
break;
case 8:return 16
break;
case 9:return 31
break;
case 10:return 32
break;
case 11:return 5
break;
case 12:return 'INVALID'
break;
}
},
rules: [/^(?:[\s\t\n\r])/,/^(?:=)/,/^(?:[*/+-])/,/^(?:\b[a-zA-Z_]\w*\b)/,/^(?:\b[0-9]+\b)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}